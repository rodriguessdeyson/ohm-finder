@using ResistorColorCode.App.Components.Shared.Resistor
@using ResistorColorCode.Domain.Resistors.Models
@using ResistorColorCode.Domain.Resistors.Services

@inject IStringLocalizer<AppResources> Localizer

<div style="width: 100%" class="row">
	<div class="col-md-6 col-sm-12 d-flex justify-content-center align-self-center">
		<div class="d-flex flex-column align-items-center">
			<FourBandsResistorComponent
				FirstBandColor="@FirstBand.Color"
				SecondBandColor="@SecondBand.Color"
				MultiplierBandColor="@MultiplierBand.Color"
				ToleranceBandColor="@ToleranceBand.Color"
				ResistorValue="@ResistorValue"
				ResistorDisclaimer="@ResistorDisclaimer"
				Hover="@HoverBand" />
		</div>
	</div>

	<div class="col-md-6 col-sm-12 d-flex flex-column justify-content-center align-self-center">
		<div @onmouseover="@(() => OnOver(ResistorBandRegionEnum.FirstBand))"
			 @onmouseout="@(() => OnOver(ResistorBandRegionEnum.Unspecified))">
			<div class="d-flex align-items-center">
				<LedComponent
					BandColor="@FirstBand.Color" />
				<label class="mx-2">@Localizer["ResistorFirstBand"]:</label>
			</div>
			<InputSelect
				@bind-Value:get="FirstBandId"
				@bind-Value:set="SetFirstBand"
				class="form-control my-2"
				style="background-color:#263540; color: white; border-color: #263540;"
			>
				@foreach (var value in FirstBandValues)
				{
					<option value="@value.Id">@value.Label</option>
				}
			</InputSelect>
		</div>

		<div @onmouseover="@(() => OnOver(ResistorBandRegionEnum.SecondBand))"
			 @onmouseout="@(() => OnOver(ResistorBandRegionEnum.Unspecified))">
			<div class="d-flex align-items-center">
				<LedComponent
					BandColor="@SecondBand.Color" />
				<label class="mx-2">@Localizer["ResistorSecondBand"]:</label>
			</div>
			<InputSelect
				@bind-Value:get="SecondBandId"
				@bind-Value:set="SetSecondBand"
				@onchange="OnCalculateResistorValue"
				class="form-control my-2"
				style="background-color:#263540; color: white; border-color: #263540;">
				@foreach (var value in SecondBandValues)
				{
					<option value="@value.Id">@value.Label</option>
				}
			</InputSelect>
		</div>

		<div @onmouseover="@(() => OnOver(ResistorBandRegionEnum.ThirdBand))"
			 @onmouseout="@(() => OnOver(ResistorBandRegionEnum.Unspecified))">
			<div class="d-flex align-items-center">
				<LedComponent
					BandColor="@MultiplierBand.Color" />
				<label class="mx-2">@Localizer["ResistorMultiplierBand"] @Localizer["ThirdBand"]:</label>
			</div>
			<InputSelect
				@bind-Value:get="MultiplierBandId"
				@bind-Value:set="SetMultiplierBand"
				@onchange="OnCalculateResistorValue"
				class="form-control my-2"
				style="background-color:#263540; color: white; border-color: #263540;">
				@foreach (var value in MultiplierBandValues)
				{
					<option value="@value.Id">@value.Label</option>
				}
			</InputSelect>
		</div>

		<div @onmouseover="@(() => OnOver(ResistorBandRegionEnum.FourthBand))"
			 @onmouseout="@(() => OnOver(ResistorBandRegionEnum.Unspecified))">
			<div class="d-flex align-items-center">
				<LedComponent
					BandColor="@ToleranceBand.Color" />
				<label class="mx-2">@Localizer["ResistorToleranceBand"] @Localizer["FourthBand"]:</label>
			</div>
			<InputSelect
				@bind-Value:get="ToleranceBandId"
				@bind-Value:set="SetToleranceBand"
				@onchange="OnCalculateResistorValue"
				class="form-control my-2"
				style="background-color:#263540; color: white; border-color: #263540;">
				@foreach (var value in ToleranceBandValues)
				{
					<option value="@value.Id">@value.Label</option>
				}
			</InputSelect>
		</div>
	</div>
</div>


@code {
	private ResistorBandRegionEnum HoverBand = ResistorBandRegionEnum.Unspecified;
	private string FirstBandId = "-1";
	private string SecondBandId = "-1";
	private string MultiplierBandId = "-1";
	private string ToleranceBandId = "-1";
	private double ResistorValue = 0;
	private string ResistorDisclaimer = string.Empty;

	private IList<ResistorDigitBand> FirstBandValues = ResistorService.DigitsBandValues();
	private IList<ResistorDigitBand> SecondBandValues = ResistorService.DigitsBandValues();
	private IList<ResistorDigitBand> ThirdBandValues = ResistorService.DigitsBandValues();
	private IList<ResistorMultiplierBand> MultiplierBandValues = ResistorService.MultiplierBandValues();
	private IList<ResistorToleranceBand> ToleranceBandValues = ResistorService.ToleranceBandValues();

	private ResistorDigitBand FirstBand { get; set; }
	private ResistorDigitBand SecondBand { get; set; }
	private ResistorMultiplierBand MultiplierBand { get; set; }
	private ResistorToleranceBand ToleranceBand { get; set; }

	public FourBandsResistor()
	{
		FirstBand = new ResistorDigitBand();
		SecondBand = new ResistorDigitBand();
		MultiplierBand = new ResistorMultiplierBand();
		ToleranceBand = new ResistorToleranceBand();
	}

	private void SetFirstBand(string value)
	{
		ResistorDigitBand? selected = FirstBandValues.SingleOrDefault(e => e.Id == int.Parse(value));
		if (selected != null)
		{
			FirstBand = selected;
			FirstBandId = selected.Id.ToString();
			OnCalculateResistorValue();
		}
	}

	private void SetSecondBand(string value)
	{
		ResistorDigitBand? selected = SecondBandValues.SingleOrDefault(e => e.Id == int.Parse(value));
		if (selected != null)
		{
			SecondBand = selected;
			SecondBandId = selected.Id.ToString();
			OnCalculateResistorValue();
		}
	}

	private void SetMultiplierBand(string value)
	{
		ResistorMultiplierBand? selected = MultiplierBandValues.SingleOrDefault(e => e.Id == int.Parse(value));
		if (selected != null)
		{
			MultiplierBand = selected;
			MultiplierBandId = selected.Id.ToString();
			OnCalculateResistorValue();
		}
	}

	private void SetToleranceBand(string value)
	{
		ResistorToleranceBand? selected = ToleranceBandValues.SingleOrDefault(e => e.Id == int.Parse(value));
		if (selected != null)
		{
			ToleranceBand = selected;
			ToleranceBandId = selected.Id.ToString();
			OnCalculateResistorValue();
		}
	}

	private void OnCalculateResistorValue()
	{
		if (FirstBandId.Equals("-1") || SecondBandId.Equals("-1") || MultiplierBandId.Equals("-1") || ToleranceBandId.Equals("-1"))
		{
			return;
		}

		double resistorValue = double.Parse($"{FirstBand.Value}{SecondBand.Value}");
		ResistorValue = resistorValue * MultiplierBand.Value;

		var resistorValueTolerance = ResistorValue * (ToleranceBand.Value / 100);
		var positiveTolerance = ResistorValue + resistorValueTolerance;
		var negativeTolerance = ResistorValue - resistorValueTolerance;
		ResistorDisclaimer = $"A tolerância é de ± {ToleranceBand.Value}%.";
	}

	private void OnOver(ResistorBandRegionEnum band)
	{
		HoverBand = band;
	}
}